--> Values vs. References
При передаче/присваивании (assign/pass) примитива, значение копируется

var myName = "Kyle";

var yourName = myName;

myName = "Frank";

console.log(myName);
// Frank

console.log(yourName);
// Kyle

В отличие от Объектных типов, где передается/присваивается ссылка

Итого: JS решает что копировть, ссылку или значение, в зависимости от типа значения.

--> Function forms
анонимная ф-ция, если между function и параметрами (...) нет названия.

var awesomeFunction = function(coolThings) {
    // ..
    return amazingStuff;
};

Но при этом с ES6, JS делает "name inference" для аноноимных ф-ций

awesomeFunction.name;
// "awesomeFunction"

Но только в случаях:
- присваивания =
Не происходит:
- При передачи ф-ционального выражения ч-з аргумент ф-ции (.name будет пустым, console: "anonymous function")

named function expression - когда имя есть:

var awesomeFunction = function someName(coolThings) {
    // ..
    return amazingStuff;
};

awesomeFunction.name;
// "someName"

someName - привяжется в время компиляции
awesomeFunction - в рантайме

--> Coercive Conditional Comparison

Упаси господь сравнивать небулиевые с булевыми, особенно строки

--> Prototypal "Classes"

Старый (до ES6 классов) паттерн основан на том, что все ф-ции по дефолту содержат св-во prototype (не [prototype]) которое содержит ссылку на объект прототип, на который ссылаются другие объекты, созданные с помощью вызова этой ф-ции с оператором "new".

function Classroom() {
    // ..
}

Classroom.prototype.welcome = function hello() {
    console.log("Welcome, students!");
};

var mathClass = new Classroom();

mathClass.welcome();
// Welcome, students!