--> Bigger Picture
Три столпа JS
Колонна 1: Scope and Closure
Колонна 2: Prototypes
Колонная 3: Types and Coercion

--> Scope and Closure
Граница области видимости м как переменные организованы внутри определяется на этапе парсинга (компиляции)

JS is lexically scoped, но многие говорят что нет и-за:
- hoisting
- var - function scoped

Замыкание это естественный результат лекической области видимости, когда в языке есть ф-ции первого порядка. Лежит в основе модулей.

--> Prototypes
JS один из немногих языков, где можно явно, напрямую создать объект не создавая его класс.
До появления "class" в ES6 дизайн классов строился на прототипном наследовании. Теперь язык скатился больше в ООП.
Но автор считает что зря, т.к. в прототипном наследовании есть свое удобство и простота и мощь(связь друг с другом, общий this).
Классы это один из паттернов который можно построить на базе механизма протоипов.
Другой подход, использовать объекты как объекты, позволить им взаимодействовать друг с дургом ч-з цепочку прототипов, забыть про классы. Это называется делегирование поведения "behavior delegation".
Автор считает его более мощной нежели классы и их наследование. Но все внимание сейчас приковано к этому способу, а как анти-классовый подход используется ФП, а про делегирование никто не говорит.

--> Types and Coercion
Самая игнорируемая из трех основ JS.

Инструменты ститической типизации это здорово, но автор не считает механизм типизации JS "плохим", что его нужно прикрывать с помощью TS. Естественным ходом вещей с точки зрения JS а не толпы, было бы не использовать такие инструменты.

--> Напоследок.
Не бойтесь идти против шерсти, но обосновывайте почему и приходите к консенсусу.

Порядок чтения книг:
Get Started (Book 1)
Scope & Closures (Book 2)
Objects & Classes (Book 3)
Types & Grammar (Book 4)
Sync & Async (Book 5)
ES.Next & Beyond (Book 6)
